#!/bin/sh
#readonly variables , default values etc.
readonly APPNAME=`basename "$0"`
readonly SYSARCH=`uname -m`

local_lib_path="$HOME/.local/osu_libs"
ld_debug="";no_launch=0;

libDir_prefix="/usr/lib/$SYSARCH-linux-gnu"
distro=`cat /etc/os-release | grep "ID" | cut -d '=' -f2 | sed -n '1,1p'`
if [ -z "$distro" ];then distro="unknown";fi;

lazer_args=" "
lazer_arg_file="$local_lib_path/lazer_args.tmp"
echo " " > "$lazer_arg_file" #it seems that it's the only way to implement passing unrecognized args to lazer

#functions
usage(){
cat <<EOF
Usage:
    $APPNAME [OPTION]... [...]

Mandatory arguments to long options are mandatory for short options too.
    -h, --help      :   Shows what you are reading now :P
    -n, --no-launch :   Don't launch osu!lazer
    -d, --distro=<name>  :   Override the value of \$distro
    -l, --ld-debug=<arg> :   Set LD_DEBUG value
    -L, --ld-library-path=<path> : Override the value of \$LD_LIBRARY_PATH , use absolute path

Once all the script parameters are processed , the script will send the rest parameters to osu!lazer.
EOF
}
putinfo(){
    msg="$1";
    echo "[$APPNAME][`date +%T`][INFO]\t$msg\33[0m"
}
puterror(){
    msg="$1";
    echo "[$APPNAME][`date +%T`]\33[31m[ERRO]\t$msg\33[0m"
}
putwarn(){
    msg="$1";
    echo "[$APPNAME][`date +%T`]\33[33m[WARN]\t$msg\33[0m"
}
putok(){
    msg="$1";
    echo "[$APPNAME][`date +%T`]\33[32m[OK]\t\t$msg\33[0m"
}
presets(){
    #NOTE:Distribution-specific checks should be avoided as much as possible.
    #detect which distro the user uses
    case $distro in
        ubuntu)
            libDir_prefix="/usr/lib/$SYSARCH-linux-gnu";
            ;;
        manjaro)
            libDir_prefix="/usr/lib";
            ;;
        unknown)
            puterror "Unknown distro! Using default values.";
            ;;
        *)
            ;;
    esac
}
env_sets(){
    lazer_args="`sed -n '1,1p' $lazer_arg_file`"
    putinfo "Running osu! with args:$lazer_args"
    if [ $no_launch -eq 1 ];then putinfo "Stopped because --no-launch was given";exit 0;fi;
    if [ ! -z $ld_debug ];then putinfo "Set LD_DEBUG to $ld_debug";export LD_DEBUG="$ld_debug";fi;
}
symlink(){
    origin="$1";
    target="$2";
    if [ -f "$target" ];then
        putwarn "Target file \"$target\" already exists! Skipping...";
        return 0;
    fi

    if [ -z "$origin" ] || [ -z "$target" ];then
        puterror "Origin or target filename not given!";
        return 1;
    else
        ln $origin $target -s
        if [ ! -h "$target" ];then
            puterror "$origin -> $target failed!";
            return 1;
        else
            putok "$origin -> $target success!";
            return 0;
        fi
    fi
}
findfile(){
    path="$1";
    if [ ! -f "$1" ];then
        puterror "File \"$1\" not found!";
        return 1;
    else
        putok "File \"$1\" found!";
        return 0;
    fi
}
do_nothing(){
    echo "do nothing" > /dev/null ;
}
find_and_symlink(){
    path="$1";
    search_name="$2";
    linkedname="$3";
    if [ -z "$linkedname" ];then
        putwarn "\"linkedname\" not given,using \"search_name\"($search_name) instead";
        linkedname="$search_name";
    fi

    findfile "$path"; # exists?
    if [ $? != 0 ];then #no
        filename_origin=`ls "$libDir_prefix/" | grep "$search_name" | awk '{print i$0}' i="$libDir_prefix/" | sed -n '1,1p'`
        if [ -z "$filename_origin" ];then
            return 1;
        else
            putinfo "Trying to create a symlink from \"$filename_origin\" to \"$local_lib_path/$linkedname\"";
            symlink "$filename_origin" "$local_lib_path/$linkedname"
            if [ "$?" != 0 ];then return 1;fi;
        fi
    else #yes
        do_nothing;
    fi
    return 0;
}
check_ffmpeg_libs(){
    mkdir -vp "$local_lib_path";
    putinfo "Detecting ffmpeg libs..";
    #ffmpeg it self
    if [ -z "$(which ffmpeg)" ];then
        putwarn "FFmpeg not found! This will cause video playback issues!";
        if [ ! -z "$(which zenity)" ];then
            zenity --warning --ellipsize --text="FFmpeg not found! This will cause video playback issues!";
        fi
    fi

    #libavformat
    find_and_symlink "$libDir_prefix/libavformat.so" "libavformat" "libavformat.so";
    if [ $? != 0 ];then puterror "Unable to create nessrary symlink!Please check your ffmpeg installation!" ;exit 1;fi;
    #libavcodec
    find_and_symlink "$libDir_prefix/libavcodec.so" "libavcodec" "libavcodec.so";
    if [ $? != 0 ];then puterror "Unable to create nessrary symlink!Please check your ffmpeg installation!" ;exit 1;fi;
    #libavutil
    find_and_symlink "$libDir_prefix/libavutil.so" "libavutil" "libavutil.so";
    if [ $? != 0 ];then puterror "Unable to create nessrary symlink!Please check your ffmpeg installation!" ;exit 1;fi;
    #libswscale
    find_and_symlink "$libDir_prefix/libswscale.so" "libswscale" "libswscale.so";
    if [ $? != 0 ];then puterror "Unable to create nessrary symlink!Please check your ffmpeg installation!" ;exit 1;fi;

    export LD_LIBRARY_PATH="$local_lib_path/";
    putinfo "Set LD_LIBRARY_PATH to $LD_LIBRARY_PATH ";
}

if [ ! -z "$APPIMAGE" ] && [ ! -z "$APPDIR" ]; then
    MD5=$(echo -n "file://$APPIMAGE" | md5sum | cut -d' ' -f1)
    cp "$APPDIR/osu!.png" "$HOME/.cache/thumbnails/normal/$MD5.png"
    cp "$APPDIR/osu!.png" "$HOME/.cache/thumbnails/large/$MD5.png"
    xdg-icon-resource forceupdate
fi

while [ $# -gt 0 ]; do
    arg=`echo -n "$1" | cut -d "=" -f1`
    value=`echo $1 | cut -d "=" -f2 --only-delimited`
    case $arg in
        --help | -h)
            usage;
            exit 0;
            ;;
        --distro | -d)
            if [ -z "$value" ];then puterror "No distro name was given";exit 1;fi
            distro="$value";
            shift;
            ;;
        --ld-debug | -l)
            if [ -z "$value" ];then puterror "LD_DEBUG should not be null!";exit 1;fi
            ld_debug="$value";
            shift;
            ;;
        --no-launch | -n)
            no_launch=1;
            shift;
            ;;
        --ld-library-path | -L)
            if [ -z "$value" ];then puterror "LD_LIBRARY_PATH should not be null!";exit 1;fi
            local_lib_path="$value";
            shift;
            ;;
        *)
            putwarn "Unrecognized option $arg , adding to lazer args...";
            sed -i "s/\$/ $arg/" "$lazer_arg_file";
            shift;
            ;;
    esac
done

presets;
putinfo "Running as user `whoami`(`id -u`) on $distro(`uname -a`), ARCH= $SYSARCH ,  PWD = $PWD , APPIMAGE = $APPIMAGE , APPDIR = $APPDIR ,library path prefix=$libDir_prefix"
check_ffmpeg_libs;
putok "Ready to go!"

HERE="$(dirname "$(readlink -f "${0}")")"
export PATH="${HERE}"/usr/bin/:"${PATH}"
EXEC=$(grep -e '^Exec=.*' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2 | cut -d " " -f 1)
env_sets;
exec "${EXEC}" $lazer_args
